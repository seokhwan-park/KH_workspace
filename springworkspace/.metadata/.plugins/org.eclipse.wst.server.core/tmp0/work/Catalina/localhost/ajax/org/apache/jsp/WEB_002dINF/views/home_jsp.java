/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-10-06 10:19:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1600425338000L));
    _jspx_dependants.put("jar:file:/C:/Users/yuiii/OneDrive/KH_Workspace/springworkspace/ajaxProject/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("   <title>Home</title>\n");
      out.write("   <script src=\"http://code.jquery.com/jquery-3.5.1.min.js\"></script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("   <h1 align=\"center\">Spring에서의 AJAX 사용 테스트</h1>\n");
      out.write("\n");
      out.write("   <ol>\n");
      out.write("      <li>\n");
      out.write("         서버쪽 컨트롤러 값 보내기\n");
      out.write("         <button id=\"btn1\">테스트</button>\n");
      out.write("         <div id=\"d1\"></div>\n");
      out.write("      </li>\n");
      out.write("      <script>\n");
      out.write("         $(function()\n");
      out.write("            {\n");
      out.write("               $(\"#btn1\").on(\"click\", function()\n");
      out.write("                  {\n");
      out.write("                     $.ajax(\n");
      out.write("                     {\n");
      out.write("                        url:\"test1.do\",\n");
      out.write("                        data:{name:\"신사임당\", age:47},\n");
      out.write("                        type:\"post\",\n");
      out.write("                        success:function(data)\n");
      out.write("                        {\n");
      out.write("                           console.log(data);\n");
      out.write("                           if(data==\"ok\"){\n");
      out.write("                        \t   $(\"#d1\").text(\"전송성공\");\n");
      out.write("                           }else{\n");
      out.write("                        \t   $(\"#d1\").text(\"전송실패\");\n");
      out.write("                           }\n");
      out.write("                        },\n");
      out.write("                        /* error:function(request, jqXHR, exception)\n");
      out.write("                        {\n");
      out.write("                           // jqXHR : 기본 XHMLHttpRequest 객체의 래퍼\n");
      out.write("                           alert(\"error code : \" + request.status + \"\\n\" + \"message : \" + request.responseText + \"error : \" + errorData);\n");
      out.write("                        } */\n");
      out.write("                        error:function(request,jqXHR,exception){\n");
      out.write("                        \tvar msg=\"\";\n");
      out.write("                        \tif(request.status==0){\n");
      out.write("                        \t\tmsg='Not Connect. \\n Verify Network.';\n");
      out.write("                        \t}else if(request.status == 404){\n");
      out.write("                        \t\tmsg='Requested page not found [404]';\n");
      out.write("                        \t}else if(request.status == 500){\n");
      out.write("                        \t\tmsg='Internal Server Error-> code error [500]'\n");
      out.write("                        \t}else if(request.status == 'parseerror'){\n");
      out.write("                        \t\tmsg='Requested JSON parse failed';\n");
      out.write("                        \t}else if(exception == 'timeout'){\n");
      out.write("                        \t\tmsg='Time out error';\n");
      out.write("                        \t}else if(exception == 'abort'){\n");
      out.write("                        \t\tmsg='Ajax request abprted';\n");
      out.write("                        \t}else{\n");
      out.write("                        \t\tmsg='Error. \\n' + jqXHR.responseText;\n");
      out.write("                        \t}\n");
      out.write("                        \talert(msg);\n");
      out.write("                        }\n");
      out.write("                     });\n");
      out.write("                  });\n");
      out.write("            });\n");
      out.write("      </script>\n");
      out.write("   \n");
      out.write("\n");
      out.write("\t\t<li>컨트롤러에서 리턴하는 JSON 객체 받아서 출력하기\n");
      out.write("\t\t\t<button id=\"btn2\">테스트</button>\n");
      out.write("\t\t\t<div id=\"d2\"></div>\n");
      out.write("\t\t</li>\n");
      out.write("\t\t<script>\n");
      out.write("\t\t\t$(function(){\n");
      out.write("\t\t\t\t$(\"#btn2\").on(\"click\",function(){\n");
      out.write("\t\t\t\t\t$.ajax({\n");
      out.write("\t\t\t\t\t\turl:\"test2.do\",\n");
      out.write("\t\t\t\t\t\tdataType:\"json\",\t// 컨트롤러에서 ajax로 넘겨주는 형식 지정!\n");
      out.write("\t\t\t\t\t\tsuccess:function(data){\n");
      out.write("\t\t\t\t\t\t\tconsole.log(data);\n");
      out.write("\t\t\t\t\t\t\tconsole.log(decodeURIComponent(data.userName));\n");
      out.write("\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t$(\"#d2\").html(\"아이디 : data.userId\" + data.userId\n");
      out.write("\t\t\t\t\t\t\t\t\t+ \"<br> 이름 : \" + decodeURIComponent(data.userName)\n");
      out.write("\t\t\t\t\t\t\t\t\t+ \"<br> 이메일 : \" + data.email\n");
      out.write("\t\t\t\t\t\t\t\t\t+ \"<br> 전화번호 : \" + data.phone\n");
      out.write("\t\t\t\t\t\t\t\t\t+ \"<br> 나이 : \" + data.age);\n");
      out.write("\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t},\n");
      out.write("\t\t\t\t\t\terror:function(request,status,errorData){\n");
      out.write("\t\t\t\t\t\t\talert(\"error code : \" + request.status + \"\\n\" + \"message : \" + request.responseText + \"error : \" + errorData);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t});\n");
      out.write("\t\t</script>\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   </ol>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
